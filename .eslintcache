[{"/Users/ksimic/Desktop/iksoks/tic-tac-toe-4x4/src/index.js":"1","/Users/ksimic/Desktop/iksoks/tic-tac-toe-4x4/src/App.js":"2","/Users/ksimic/Desktop/iksoks/tic-tac-toe-4x4/src/reportWebVitals.js":"3","/Users/ksimic/Desktop/iksoks/tic-tac-toe-4x4/src/components/board/Board.jsx":"4","/Users/ksimic/Desktop/iksoks/tic-tac-toe-4x4/src/components/field/Field.jsx":"5","/Users/ksimic/Desktop/iksoks/tic-tac-toe-4x4/src/helpers/js/winningMoves.js":"6","/Users/ksimic/Desktop/iksoks/tic-tac-toe-4x4/src/helpers/js/minimax.js":"7","/Users/ksimic/Desktop/iksoks/tic-tac-toe-4x4/src/helpers/js/initialFields.js":"8","/Users/ksimic/Desktop/iksoks/tic-tac-toe-4x4/src/components/player/PlayerScore.jsx":"9"},{"size":500,"mtime":1609342382410,"results":"10","hashOfConfig":"11"},{"size":5081,"mtime":1609855301887,"results":"12","hashOfConfig":"11"},{"size":362,"mtime":1609342382413,"results":"13","hashOfConfig":"11"},{"size":862,"mtime":1609848613754,"results":"14","hashOfConfig":"11"},{"size":1518,"mtime":1609853982910,"results":"15","hashOfConfig":"11"},{"size":3452,"mtime":1609843571158,"results":"16","hashOfConfig":"11"},{"size":3024,"mtime":1609854958532,"results":"17","hashOfConfig":"11"},{"size":1105,"mtime":1609854119734,"results":"18","hashOfConfig":"11"},{"size":766,"mtime":1609855497051,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"1jjtabs",{"filePath":"23","messages":"24","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25","usedDeprecatedRules":"22"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"36","messages":"37","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"22"},"/Users/ksimic/Desktop/iksoks/tic-tac-toe-4x4/src/index.js",[],["40","41"],"/Users/ksimic/Desktop/iksoks/tic-tac-toe-4x4/src/App.js",["42","43"],"import React, { useState, useEffect, useRef } from 'react';\nimport { PlayerScore } from './components/player/PlayerScore';\nimport { Board } from './components/board/Board';\nimport { initialFields } from './helpers/js/initialFields';\nimport { checkWinAfterPlayedMove, checkTie } from './helpers/js/winningMoves'\nimport { computerMove } from './helpers/js/minimax';\n\nimport './app.scss';\n\nexport const AppContext = React.createContext({});\n\nfunction App() {\n\n  let computerTimer; // timer used for computer to give it some time to play field\n\n  // all states are in the root component:\n  const [playerOneScore, setPlayerOneScore] = useState(0); // total score of player 1 (user)\n  const [playerTwoScore, setPlayerTwoScore] = useState(0); // total score of player 2 (computer)\n  const [tieScore, setTieScore] = useState(0); // total number of tied games\n\n  const [fields, setFields] = useState(initialFields); // initial fields of the board\n  const [currentPlayer, setCurrentPlayer] = useState(Math.round(Math.random())); // 0 -> player 1 (user), 1 -> player 2 (computer)\n  const [currentBoardStatePlayerOne, setCurrentBoardStatePlayerOne] = useState(0); // player 1 board (moves player 1 made on whole board)\n  const [currentBoardStatePlayerTwo, setCurrentBoardStatePlayerTwo] = useState(0); // player 2 board (moves player 2 made on whole board)\n  const [lastPlayedField, setLastPlayedField] = useState(0);\n  const [isGameWon, setIsGameWon] = useState(false);\n  const [victoryMessage, setVictoryMessage] = useState(\"\");\n\n  const isFirstRun = useRef(true);\n\n  const restartGame = () => {\n    clearTimeout(computerTimer);\n    setVictoryMessage(\"\");\n    setFields(initialFields);\n    setLastPlayedField(0);\n    setIsGameWon(false);\n\n    if (!currentBoardStatePlayerOne && !currentBoardStatePlayerTwo) { \n      setRandomPlayer();\n    }\n\n    else { \n      setCurrentBoardStatePlayerOne(0);\n      setCurrentBoardStatePlayerTwo(0);\n    }\n  }\n\n  const updatefields = (fieldIndex, fieldValue) => {\n    let items = [...fields];\n    items[fieldIndex] = fieldValue;\n    setFields(items);\n  }\n\n  const updatePlayersBoard = (playedField) => {\n    setLastPlayedField(playedField);\n\n    if (!currentPlayer) { // player 1 is on the move\n      setCurrentBoardStatePlayerOne(currentBoardStatePlayerOne | playedField);\n    }\n    else { // player 2 is on the move\n      setCurrentBoardStatePlayerTwo(currentBoardStatePlayerTwo | playedField);\n    }\n  }\n\n  const computerPlay = () => {\n    computerTimer = setTimeout(() => {\n      const computerMoveField = computerMove(currentBoardStatePlayerOne, currentBoardStatePlayerTwo);\n    for (let i = 0; i < 16; i++) { \n      if (Math.pow(2, i) === computerMoveField) { \n        updatefields(i, { isPlayed: true, playedBy: currentPlayer });\n        updatePlayersBoard(computerMoveField);\n      }\n    }\n    }, Math.floor(Math.random() * (1000 - 500 + 1) + 500));\n  }\n\n  const setRandomPlayer = () => { \n    const randomNewPlayer = Math.round(Math.random());\n      if ((randomNewPlayer === currentPlayer) && currentPlayer) { \n        computerPlay();\n      }\n      else setCurrentPlayer(randomNewPlayer);\n  }\n\n  useEffect(() => {\n    if (isFirstRun.current) { // don't execute on initial load\n      isFirstRun.current = false;\n      return;\n    }\n    if (!currentBoardStatePlayerOne && !currentBoardStatePlayerTwo) {\n      setRandomPlayer();\n      return;\n    }\n    const checkForWin = checkWinAfterPlayedMove(currentPlayer ? currentBoardStatePlayerTwo : currentBoardStatePlayerOne, lastPlayedField);\n    if (checkForWin) {\n      setIsGameWon(true);\n      if (currentPlayer) {\n        setPlayerTwoScore(playerTwoScore + 1)\n        setVictoryMessage(\"Computer wins!\");\n      }\n      else {\n        setPlayerOneScore(playerOneScore + 1)\n        setVictoryMessage(\"User wins!\");\n      }\n    }\n    else if (checkTie(currentBoardStatePlayerTwo ^ currentBoardStatePlayerOne)) {\n      setIsGameWon(true);\n      setTieScore(tieScore + 1);\n      setVictoryMessage(\"It's a tie!\");\n    }\n    else {\n      setCurrentPlayer((currentPlayer + 1) % 2);\n    }\n  }, [currentBoardStatePlayerOne, currentBoardStatePlayerTwo]);\n\n  useEffect(() => {\n    if (currentPlayer) { // if player is computer execute it's code\n      computerPlay(); \n    }\n  }, [currentPlayer]);\n\n  return (\n    <div className=\"app\">\n      <div className=\"app__title\">\n        Tic-Tac-Toe 4x4\n      </div>\n      <AppContext.Provider value={{ currentPlayer, updatePlayersBoard, fields, updatefields, isGameWon, victoryMessage }}>\n        <Board />\n        <div className=\"app__score\">\n          <PlayerScore color=\"red\" player=\"0\" text=\"User\" score={playerOneScore} />\n          <PlayerScore text=\"Ties\" score={tieScore} />\n          <PlayerScore color=\"green\" player=\"1\" text=\"Computer\" score={playerTwoScore} />\n        </div>\n        <div className=\"app__restart\">\n          <button\n            onMouseDown={ev => ev.preventDefault()}\n            onClick={restartGame}\n          >\n            Restart Game\n          </button> \n        </div>\n      </AppContext.Provider>\n    </div>\n  );\n}\n\nexport default App;\n","/Users/ksimic/Desktop/iksoks/tic-tac-toe-4x4/src/reportWebVitals.js",[],"/Users/ksimic/Desktop/iksoks/tic-tac-toe-4x4/src/components/board/Board.jsx",[],"/Users/ksimic/Desktop/iksoks/tic-tac-toe-4x4/src/components/field/Field.jsx",[],"/Users/ksimic/Desktop/iksoks/tic-tac-toe-4x4/src/helpers/js/winningMoves.js",[],"/Users/ksimic/Desktop/iksoks/tic-tac-toe-4x4/src/helpers/js/minimax.js",[],"/Users/ksimic/Desktop/iksoks/tic-tac-toe-4x4/src/helpers/js/initialFields.js",[],"/Users/ksimic/Desktop/iksoks/tic-tac-toe-4x4/src/components/player/PlayerScore.jsx",[],{"ruleId":"44","replacedBy":"45"},{"ruleId":"46","replacedBy":"47"},{"ruleId":"48","severity":1,"message":"49","line":114,"column":6,"nodeType":"50","endLine":114,"endColumn":62,"suggestions":"51"},{"ruleId":"48","severity":1,"message":"52","line":120,"column":6,"nodeType":"50","endLine":120,"endColumn":21,"suggestions":"53"},"no-native-reassign",["54"],"no-negated-in-lhs",["55"],"react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'currentPlayer', 'lastPlayedField', 'playerOneScore', 'playerTwoScore', 'setRandomPlayer', and 'tieScore'. Either include them or remove the dependency array. You can also do a functional update 'setCurrentPlayer(c => ...)' if you only need 'currentPlayer' in the 'setCurrentPlayer' call.","ArrayExpression",["56"],"React Hook useEffect has a missing dependency: 'computerPlay'. Either include it or remove the dependency array.",["57"],"no-global-assign","no-unsafe-negation",{"desc":"58","fix":"59"},{"desc":"60","fix":"61"},"Update the dependencies array to be: [currentBoardStatePlayerOne, currentBoardStatePlayerTwo, currentPlayer, lastPlayedField, playerOneScore, playerTwoScore, setRandomPlayer, tieScore]",{"range":"62","text":"63"},"Update the dependencies array to be: [computerPlay, currentPlayer]",{"range":"64","text":"65"},[4065,4121],"[currentBoardStatePlayerOne, currentBoardStatePlayerTwo, currentPlayer, lastPlayedField, playerOneScore, playerTwoScore, setRandomPlayer, tieScore]",[4247,4262],"[computerPlay, currentPlayer]"]
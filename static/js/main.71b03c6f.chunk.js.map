{"version":3,"sources":["components/field/Field.jsx","components/board/Board.jsx","helpers/js/winningMoves.js","App.js","reportWebVitals.js","index.js"],"names":["Field","props","gameState","useContext","AppContext","className","classnames","isPlayed","playedBy","onMouseDown","ev","preventDefault","onClick","updatefields","index","currentPlayer","updatePlayersBoard","position","Board","fields","map","field","Math","pow","winningMoves","checkWin","currentBoard","playedMove","filter","winningMove","findPossibleWinningCombination","forEach","possibleWinningMove","console","log","React","createContext","initialFields","App","isFirstRun","useRef","useState","setFields","round","random","setCurrentPlayer","currentBoardStatePlayerOne","setCurrentBoardStatePlayerOne","currentBoardStatePlayerTwo","setCurrentBoardStatePlayerTwo","lastPlayedField","setLastPlayedField","useEffect","current","Provider","value","playedField","fieldIndex","fieldValue","items","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.71b03c6f.chunk.js","sourcesContent":["import React, { useContext } from 'react';\nimport { AppContext } from '../../App';\nimport classnames from 'classnames';\n\nimport './field.scss';\n\nexport function Field(props) { \n\n    const gameState = useContext(AppContext);\n\n    const handleFieldClick = (ev) => {\n        gameState.updatefields(props.index, {isPlayed: true, playedBy: gameState.currentPlayer});\n        gameState.updatePlayersBoard(props.position);\n    }\n\n    return (\n        <div className=\"field\">\n            <div className=\"field__button-wrapper\">\n                <button\n                    className={classnames(\"field__button\",\n                        props.isPlayed && \"field__button--disabled\",\n                        props.playedBy === 1 && \"field__button--player-2\",\n                        props.playedBy === 0 && \"field__button--player-1\")\n                    }\n                    onMouseDown={ev => ev.preventDefault()}\n                    onClick={handleFieldClick}\n                >\n                </button>\n            </div>\n        </div>\n    );\n}","import React, { useContext } from 'react';\nimport { Field } from '../field/Field';\nimport { AppContext } from '../../App';\n\nimport './board.scss';\n\nexport function Board() { \n\n     const gameState = useContext(AppContext);\n\n    const fields = gameState.fields.map((field, index) => { \n        return <Field key={index} position={Math.pow(2, index)} index={ index } isPlayed={field.isPlayed} playedBy={field.playedBy} />\n    });\n\n    return (\n        <div className=\"board\">\n            {fields}\n        </div>\n    );\n}\n","export const winningMoves = [\n    0b0000000000001111, // first row\n    0b0000000011110000, // second row\n    0b0000111100000000, // third row\n    0b1111000000000000, // forth row\n    0b0001000100010001, // first column\n    0b0010001000100010, // second column\n    0b0100010001000100, // third column\n    0b1000100010001000, // forth column\n    0b1000010000100001, // left diagonal\n    0b0001001001001000, // right diagonal\n    0b0000000000110011, // top left square\n    0b0000000001100110, // top center square\n    0b0000000011001100, // top right square\n    0b0000001100110000, // middle left square\n    0b0000011001100000, // middle center square\n    0b0000110011000000, // middle right square\n    0b0011001100000000, // bottom left square\n    0b0110011000000000, // bottom center square\n    0b1100110000000000, // bottom right square\n];\n\nexport const findPossibleWinningCombination = (playedMove) => { \n    return winningMoves.filter(winningMove => { \n        return (winningMove & playedMove) === playedMove;\n    });\n}\n\nexport const checkWin = (currentBoard, playedMove) => { \n    const possibleWinningMoves = findPossibleWinningCombination(playedMove);\n    possibleWinningMoves.forEach(possibleWinningMove => {\n        if ((currentBoard & possibleWinningMove) === possibleWinningMove) { \n            // pronounce victory and return winning move\n            console.log('Yaay, victory');\n        }\n        // else return nothing\n     });\n}","import React, { useState, useEffect, useRef } from 'react';\nimport { Board } from './components/board/Board';\nimport { checkWin } from './helpers/js/winningMoves'\n\nimport './App.scss';\n\nexport const AppContext = React.createContext({});\n\nconst initialFields = [\n  {\n    isPlayed: false,\n    playedBy: -1,\n},\n  {\n    isPlayed: false,\n    playedBy: -1,\n},\n  {\n    isPlayed: false,\n    playedBy: -1,\n},\n  {\n    isPlayed: false,\n    playedBy: -1,\n},\n  {\n    isPlayed: false,\n    playedBy: -1,\n},\n  {\n    isPlayed: false,\n    playedBy: -1,\n},\n  {\n    isPlayed: false,\n    playedBy: -1,\n},\n  {\n    isPlayed: false,\n    playedBy: -1,\n},\n  {\n    isPlayed: false,\n    playedBy: -1,\n},\n  {\n    isPlayed: false,\n    playedBy: -1,\n},\n  {\n    isPlayed: false,\n    playedBy: -1,\n},\n  {\n    isPlayed: false,\n    playedBy: -1,\n},\n  {\n    isPlayed: false,\n    playedBy: -1,\n},\n  {\n    isPlayed: false,\n    playedBy: -1,\n},\n  {\n    isPlayed: false,\n    playedBy: -1,\n},\n  {\n    isPlayed: false,\n    playedBy: -1,\n},\n];\n\nfunction App() {\n\n  const isFirstRun = useRef(true);\n\n  const [fields, setFields] = useState(initialFields);\n  const [currentPlayer, setCurrentPlayer] = useState(Math.round(Math.random())); // 0 -> player 1 (homan), 1 -> player 2 (computer)\n  const [currentBoardStatePlayerOne, setCurrentBoardStatePlayerOne] = useState(0);\n  const [currentBoardStatePlayerTwo, setCurrentBoardStatePlayerTwo] = useState(0);\n  const [lastPlayedField, setLastPlayedField] = useState(0);\n\n  const updatefields = (fieldIndex, fieldValue) => {\n    let items = [...fields];\n    items[fieldIndex] = fieldValue;\n    setFields(items);\n  }\n\n  const updatePlayersBoard = (playedField) => {\n    setLastPlayedField(playedField);\n\n    if (!currentPlayer) { // player 1 is on the move\n      setCurrentBoardStatePlayerOne(currentBoardStatePlayerOne | playedField);\n    }\n    else { // player 2 is on the move\n      setCurrentBoardStatePlayerTwo(currentBoardStatePlayerTwo | playedField);\n    }\n  }\n\n  useEffect(() => {\n    if (isFirstRun.current) { // don't execute on initial load\n      isFirstRun.current = false;\n      return;\n    }\n    checkWin(currentPlayer ? currentBoardStatePlayerTwo : currentBoardStatePlayerOne, lastPlayedField);\n    setCurrentPlayer((currentPlayer + 1) % 2);\n  }, [currentBoardStatePlayerOne, currentBoardStatePlayerTwo]);\n\n   useEffect(() => {\n     if (currentPlayer) { // if player is computer execute minimax\n\n     }\n  }, [currentPlayer]);\n\n  return (\n    <div className=\"app\">\n      <AppContext.Provider value={{ currentPlayer, updatePlayersBoard, fields, updatefields }}>\n        { `player ${currentPlayer + 1} turn`}\n        <Board />\n      </AppContext.Provider>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}
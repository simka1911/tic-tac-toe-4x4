{"version":3,"sources":["components/player/PlayerScore.jsx","components/field/Field.jsx","components/board/Board.jsx","helpers/js/initialFields.js","helpers/js/winningMoves.js","helpers/js/minimax.js","App.js","reportWebVitals.js","index.js"],"names":["PlayerScore","props","gameState","useContext","AppContext","className","classnames","color","player","currentPlayer","toString","text","score","Field","isPlayed","isGameWon","playedBy","disabled","onMouseDown","ev","preventDefault","onClick","updatefields","index","updatePlayersBoard","position","Board","fields","map","field","Math","pow","initialFields","winningMoves","checkWinAfterPlayedMove","currentBoard","playedMove","winningMove","filter","findPossibleWinningCombination","forEach","possibleWinningMove","evaluateBoard","otherBoard","totalValue","currentValue","countBits","otherValue","number","match","length","computerMoveField","minimaxWithAlphaBetaPruning","board","boardOne","boardTwo","depth","maxDepth","isComputerPlayer","alpha","beta","willPlayerWin","checkWinBeforePlayedMove","evaluate","bestMove","bestResult","Infinity","possibleMoves","getPossibleMoves","sort","a","b","random","currentPossibleMove","returnedResult","i","push","move","React","createContext","App","useState","playerOneScore","setPlayerOneScore","playerTwoScore","setPlayerTwoScore","tieScore","setTieScore","isFirstRun","useRef","setFields","round","setCurrentPlayer","currentBoardStatePlayerOne","setCurrentBoardStatePlayerOne","currentBoardStatePlayerTwo","setCurrentBoardStatePlayerTwo","lastPlayedField","setLastPlayedField","setIsGameWon","restartGame","fieldIndex","fieldValue","items","playedField","useEffect","current","setTimeout","Provider","value","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.08dad3f6.chunk.js","sourcesContent":["import React, { useContext } from 'react';\nimport { AppContext } from '../../App';\nimport classnames from 'classnames';\n\nimport './player-score.scss';\n\nexport function PlayerScore(props) { \n\n    const gameState = useContext(AppContext);\n\n    return (\n        <div className={classnames(\"player-score\",\n            props.color === \"red\" && \"player-score--red\",\n            props.color === \"green\" && \"player-score--green\",\n            props.player === gameState.currentPlayer.toString() &&\n                \"player-score--color\")}\n        >\n            <div className=\"player-score__text\">\n                {props.text}\n            </div>\n            <div className=\"player-score__value\">\n                {props.score}\n            </div>\n        </div>\n    );\n}","import React, { useContext } from 'react';\nimport { AppContext } from '../../App';\nimport classnames from 'classnames';\n\nimport './field.scss';\n\nexport function Field(props) { \n\n    const gameState = useContext(AppContext);\n\n    const handleFieldClick = (ev) => {\n        if (gameState.currentPlayer) return;\n        gameState.updatefields(props.index, {isPlayed: true, playedBy: gameState.currentPlayer});\n        gameState.updatePlayersBoard(props.position);\n    }\n\n    return (\n        <div className=\"field\">\n            <div className=\"field__button-wrapper\">\n                <button\n                    className={classnames(\"field__button\",\n                        (props.isPlayed || gameState.isGameWon || gameState.currentPlayer) && \"field__button--disabled\",\n                        props.playedBy === 1 && \"field__button--player-2\",\n                        props.playedBy === 0 && \"field__button--player-1\",\n                        gameState.currentPlayer === 1 && \"field__button--player-2-hover\",\n                        gameState.currentPlayer === 0 && \"field__button--player-1-hover\")\n                    }\n                    disabled={props.isPlayed || gameState.isGameWon || gameState.currentPlayer}\n                    onMouseDown={ev => ev.preventDefault()}\n                    onClick={handleFieldClick}\n                >\n                </button>\n            </div>\n        </div>\n    );\n}","import React, { useContext } from 'react';\nimport { Field } from '../field/Field';\nimport { AppContext } from '../../App';\n\nimport './board.scss';\n\nexport function Board() { \n\n     const gameState = useContext(AppContext);\n\n    const fields = gameState.fields.map((field, index) => { \n        return <Field key={index} position={Math.pow(2, index)} index={ index } isPlayed={field.isPlayed} playedBy={field.playedBy} />\n    });\n\n    return (\n        <div className=\"board\">\n            {fields}\n        </div>\n    );\n}\n","export const initialFields = [\n    {\n        isPlayed: false,\n        playedBy: -1,\n    },\n    {\n        isPlayed: false,\n        playedBy: -1,\n    },\n    {\n        isPlayed: false,\n        playedBy: -1,\n    },\n    {\n        isPlayed: false,\n        playedBy: -1,\n    },\n    {\n        isPlayed: false,\n        playedBy: -1,\n    },\n    {\n        isPlayed: false,\n        playedBy: -1,\n    },\n    {\n        isPlayed: false,\n        playedBy: -1,\n    },\n    {\n        isPlayed: false,\n        playedBy: -1,\n    },\n    {\n        isPlayed: false,\n        playedBy: -1,\n    },\n    {\n        isPlayed: false,\n        playedBy: -1,\n    },\n    {\n        isPlayed: false,\n        playedBy: -1,\n    },\n    {\n        isPlayed: false,\n        playedBy: -1,\n    },\n    {\n        isPlayed: false,\n        playedBy: -1,\n    },\n    {\n        isPlayed: false,\n        playedBy: -1,\n    },\n    {\n        isPlayed: false,\n        playedBy: -1,\n    },\n    {\n        isPlayed: false,\n        playedBy: -1,\n    },\n];","export const winningMoves = [\n    0b0000000000001111, // first row\n    0b0000000011110000, // second row\n    0b0000111100000000, // third row\n    0b1111000000000000, // forth row\n    0b0001000100010001, // first column\n    0b0010001000100010, // second column\n    0b0100010001000100, // third column\n    0b1000100010001000, // forth column\n    0b1000010000100001, // left diagonal\n    0b0001001001001000, // right diagonal\n    0b0000000000110011, // top left square\n    0b0000000001100110, // top center square\n    0b0000000011001100, // top right square\n    0b0000001100110000, // middle left square\n    0b0000011001100000, // middle center square\n    0b0000110011000000, // middle right square\n    0b0011001100000000, // bottom left square\n    0b0110011000000000, // bottom center square\n    0b1100110000000000, // bottom right square\n];\n\nconst fullBoard = 0b1111111111111111;\n\nexport const findPossibleWinningCombination = (playedMove) => { \n    return winningMoves.filter(winningMove => { \n        return (winningMove & playedMove) === playedMove;\n    });\n}\n\nexport const checkWinAfterPlayedMove = (currentBoard, playedMove) => {\n    let winningMove = 0;\n    const possibleWinningMoves = findPossibleWinningCombination(playedMove);\n    possibleWinningMoves.forEach(possibleWinningMove => {\n        if ((currentBoard & possibleWinningMove) === possibleWinningMove) { \n            winningMove = possibleWinningMove;\n        }\n    });\n    return winningMove;\n}\n\nexport const checkWinBeforePlayedMove = (currentBoard) => {\n    let willPlayerWin = 0;\n     for (let possibleWinningMove of winningMoves) {\n        if ((currentBoard & possibleWinningMove) === possibleWinningMove) { \n            willPlayerWin = possibleWinningMove;\n            break;\n        }\n    };\n    return willPlayerWin;\n}\n\nexport const checkTie = (board) => {\n    return ((board & fullBoard) === fullBoard);\n}\n\nexport const evaluateBoard = (currentBoard, otherBoard) => { \n    let totalValue = 0;\n    for (let possibleWinningMove of winningMoves) { \n        const currentValue = countBits(possibleWinningMove & currentBoard);\n        const otherValue = countBits(possibleWinningMove & otherBoard); // should be 0 in best case\n\n        if (otherValue === 0 && currentValue === 4) totalValue += 1000;\n        else if (otherValue === 0 && currentValue === 3) totalValue += 100;\n        else if (otherValue === 0 && currentValue === 2) totalValue += 10;\n        else if (otherValue === 0 && currentValue === 1) totalValue += 1;\n        // else if (otherValue === 4 && currentValue === 0) totalValue -= 1000;\n        // else if (otherValue === 3 && currentValue === 0) totalValue -= 100;\n        // else if (otherValue === 2 && currentValue === 0) totalValue -= 10;\n        // else if (otherValue === 1 && currentValue === 0) totalValue -= 1;\n    }\n    return totalValue;\n}\n\nconst countBits = (number) => { \n    return number && number.toString(2).match(/1/g).length;\n}","import { checkWinBeforePlayedMove, evaluateBoard } from './winningMoves';\n\nlet computerMoveField = 0;\n\nexport const computerMove = (boardOne, boardTwo) => {\n    const board = boardOne | boardTwo;\n    computerMoveField = 0;\n    minimaxWithAlphaBetaPruning(board, boardOne, boardTwo, 0, 4, true, -Infinity, Infinity);\n    return computerMoveField || 0;\n}\n\nexport const minimaxWithAlphaBetaPruning = (board, boardOne, boardTwo, depth, maxDepth, isComputerPlayer, alpha, beta) => {\n    if (checkWinBeforePlayedMove(isComputerPlayer ? boardTwo : boardOne) || maxDepth === depth) {\n        return evaluate(isComputerPlayer, depth, null, boardOne, boardTwo);\n    }\n\n    let bestMove = null;\n    let bestResult = isComputerPlayer ? -Infinity : +Infinity;\n\n    const possibleMoves = getPossibleMoves(board).sort((a, b) => {return 0.5 - Math.random()});\n\n    if (!possibleMoves.length) return 0;\n\n    for (let currentPossibleMove of possibleMoves) {\n        \n        const newBoard = (currentPossibleMove | board);\n        const newBoardOne = isComputerPlayer ? boardOne : (currentPossibleMove | boardOne);\n        const newBoardTwo = isComputerPlayer ? (currentPossibleMove | boardTwo) : boardTwo;\n        const returnedResult = minimaxWithAlphaBetaPruning(newBoard, newBoardOne, newBoardTwo,  depth + 1, maxDepth, !isComputerPlayer, alpha, beta);\n        \n        if (isComputerPlayer) {\n            if (returnedResult > bestResult) {\n                bestResult = returnedResult;\n                bestMove = currentPossibleMove;\n            }\n            if (bestResult > alpha) { \n                alpha = bestResult;\n                if (depth === 0) {\n                    computerMoveField = bestMove;\n                }\n            }\n            if (alpha >= beta) {\n                bestResult = alpha;\n                break;\n            }\n        }\n\n        else { \n            if (returnedResult < bestResult) {\n                bestResult = returnedResult;\n                bestMove = currentPossibleMove;\n            }\n            if (bestResult < beta) { \n                beta = bestResult;\n                if (depth === 0) { \n                    computerMoveField = bestMove;\n                }\n            } \n            if (beta <= alpha) {\n                bestResult = beta;\n                break;\n            }\n            \n        }\n    };\n    \n    return bestResult;\n}\n\nconst getPossibleMoves = (board) => {\n    const possibleMoves = [];\n    for (let i = 0; i < 16; i++) { \n        if ((board & Math.pow(2, i)) === 0) { \n            possibleMoves.push(Math.pow(2, i));\n        }\n    }\n    return possibleMoves;\n}\n\nconst evaluate = (isComputerPlayer, depth, move, boardOne, boardTwo) => {\n    if (isComputerPlayer) {\n        return evaluateBoard(boardTwo, boardOne) - depth;\n    }\n    else { \n        return depth - evaluateBoard(boardOne, boardTwo);\n    }\n}","import React, { useState, useEffect, useRef } from 'react';\nimport { PlayerScore } from './components/player/PlayerScore';\nimport { Board } from './components/board/Board';\nimport { initialFields } from './helpers/js/initialFields';\nimport { checkWinAfterPlayedMove, checkTie } from './helpers/js/winningMoves'\nimport { computerMove } from './helpers/js/minimax';\n\nimport './App.scss';\n\nexport const AppContext = React.createContext({});\n\nfunction App() {\n\n  const [playerOneScore, setPlayerOneScore] = useState(0);\n  const [playerTwoScore, setPlayerTwoScore] = useState(0);\n  const [tieScore, setTieScore] = useState(0);\n\n  const isFirstRun = useRef(true);\n\n  const [fields, setFields] = useState(initialFields);\n  const [currentPlayer, setCurrentPlayer] = useState(Math.round(Math.random())); // 0 -> player 1 (human), 1 -> player 2 (computer)\n  const [currentBoardStatePlayerOne, setCurrentBoardStatePlayerOne] = useState(0);\n  const [currentBoardStatePlayerTwo, setCurrentBoardStatePlayerTwo] = useState(0);\n  const [lastPlayedField, setLastPlayedField] = useState(0);\n  const [isGameWon, setIsGameWon] = useState(false);\n\n  const restartGame = () => {\n    setFields(initialFields);\n    setLastPlayedField(0);\n    setCurrentBoardStatePlayerOne(0);\n    setCurrentBoardStatePlayerTwo(0);\n    setIsGameWon(false);\n    setCurrentPlayer(Math.round(Math.random()));\n  }\n\n  const updatefields = (fieldIndex, fieldValue) => {\n    let items = [...fields];\n    items[fieldIndex] = fieldValue;\n    setFields(items);\n  }\n\n  const updatePlayersBoard = (playedField) => {\n    setLastPlayedField(playedField);\n\n    if (!currentPlayer) { // player 1 is on the move\n      setCurrentBoardStatePlayerOne(currentBoardStatePlayerOne | playedField);\n    }\n    else { // player 2 is on the move\n      setCurrentBoardStatePlayerTwo(currentBoardStatePlayerTwo | playedField);\n    }\n  }\n\n  useEffect(() => {\n    if (isFirstRun.current) { // don't execute on initial load\n      isFirstRun.current = false;\n      return;\n    }\n    if (!currentBoardStatePlayerOne && !currentBoardStatePlayerTwo) return;\n    const checkForWin = checkWinAfterPlayedMove(currentPlayer ? currentBoardStatePlayerTwo : currentBoardStatePlayerOne, lastPlayedField);\n    if (checkForWin) {\n      setIsGameWon(true);\n      currentPlayer ? setPlayerTwoScore(playerTwoScore + 1) : setPlayerOneScore(playerOneScore + 1);\n      restartGame();\n    }\n    else if (checkTie(currentBoardStatePlayerTwo ^ currentBoardStatePlayerOne)) {\n      setIsGameWon(true);\n      setTieScore(tieScore + 1);\n      restartGame();\n    }\n    else {\n      setCurrentPlayer((currentPlayer + 1) % 2);\n    }\n  }, [currentBoardStatePlayerOne, currentBoardStatePlayerTwo]);\n\n  useEffect(() => {\n    if (currentPlayer) { // if player is computer execute minimax algorithm\n       const computerMoveField = computerMove(currentBoardStatePlayerOne, currentBoardStatePlayerTwo);\n       setTimeout(() => {\n         for (let i = 0; i < 16; i++) { \n         if (Math.pow(2, i) === computerMoveField) { \n           updatefields(i, { isPlayed: true, playedBy: 1 });\n           updatePlayersBoard(computerMoveField);\n         }\n       }\n        }, 500)\n     }\n  }, [currentPlayer]);\n\n  return (\n    <div className=\"app\">\n      <div className=\"app__title\">\n        Tic-Tac-Toe 4x4\n      </div>\n      <AppContext.Provider value={{ currentPlayer, updatePlayersBoard, fields, updatefields, isGameWon }}>\n        <Board />\n        <div className=\"app__score\">\n          <PlayerScore color=\"red\" player=\"0\" text=\"User\" score={playerOneScore} />\n          <PlayerScore text=\"Ties\" score={tieScore} />\n          <PlayerScore color=\"green\" player=\"1\" text=\"Computer\" score={playerTwoScore} />\n        </div>\n        \n      </AppContext.Provider>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}
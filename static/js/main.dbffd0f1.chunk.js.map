{"version":3,"sources":["components/player/PlayerScore.jsx","components/field/Field.jsx","components/board/Board.jsx","helpers/js/initialFields.js","helpers/js/winningMoves.js","helpers/js/minimax.js","App.js","reportWebVitals.js","index.js"],"names":["PlayerScore","props","gameState","useContext","AppContext","className","classnames","color","player","currentPlayer","toString","text","score","Field","isPlayed","isGameWon","playedBy","disabled","onMouseDown","ev","preventDefault","onClick","updatefields","index","updatePlayersBoard","position","Board","fields","map","field","Math","pow","victoryMessage","initialFields","winningMoves","checkWinAfterPlayedMove","currentBoard","playedMove","winningMove","filter","findPossibleWinningCombination","forEach","possibleWinningMove","evaluateBoard","otherBoard","totalValue","currentValue","countBits","otherValue","number","match","length","computerMoveField","minimaxWithAlphaBetaPruning","boardOne","boardTwo","depth","maxDepth","isComputerPlayer","alpha","beta","willPlayerWin","checkWinBeforePlayedMove","evaluate","bestMove","bestResult","Infinity","possibleMoves","getPossibleMoves","sort","a","b","random","currentPossibleMove","returnedResult","board","i","push","React","createContext","App","useState","playerOneScore","setPlayerOneScore","playerTwoScore","setPlayerTwoScore","tieScore","setTieScore","isFirstRun","useRef","setFields","round","setCurrentPlayer","currentBoardStatePlayerOne","setCurrentBoardStatePlayerOne","currentBoardStatePlayerTwo","setCurrentBoardStatePlayerTwo","lastPlayedField","setLastPlayedField","setIsGameWon","setVictoryMessage","fieldIndex","fieldValue","items","playedField","computerPlay","setRandomPlayer","randomNewPlayer","useEffect","current","Provider","value","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.dbffd0f1.chunk.js","sourcesContent":["import React, { useContext } from 'react';\nimport { AppContext } from '../../App';\nimport classnames from 'classnames';\n\nimport './player-score.scss';\n\nexport function PlayerScore(props) { \n\n    const gameState = useContext(AppContext);\n\n    return (\n        <div className={classnames(\"player-score\",\n            props.color === \"red\" && \"player-score--red\",\n            props.color === \"green\" && \"player-score--green\",\n            props.player === gameState.currentPlayer.toString() &&\n                \"player-score--color\")}\n        >\n            <div className=\"player-score__text\">\n                {props.text}\n            </div>\n            <div className=\"player-score__value\">\n                {props.score}\n            </div>\n        </div>\n    );\n}","import React, { useContext } from 'react';\nimport { AppContext } from '../../App';\nimport classnames from 'classnames';\n\nimport './field.scss';\n\nexport function Field(props) { \n\n    const gameState = useContext(AppContext);\n\n    const handleFieldClick = (ev) => {\n        if (gameState.currentPlayer) return;\n        gameState.updatefields(props.index, {isPlayed: true, playedBy: gameState.currentPlayer});\n        gameState.updatePlayersBoard(props.position);\n    }\n\n    return (\n        <div className=\"field\">\n            <div className=\"field__button-wrapper\">\n                <button\n                    className={classnames(\"field__button\",\n                        (props.isPlayed || gameState.isGameWon || gameState.currentPlayer) && \"field__button--disabled\",\n                        props.playedBy === 1 && \"field__button--player-2\",\n                        props.playedBy === 0 && \"field__button--player-1\",\n                        gameState.currentPlayer === 1 && \"field__button--player-2-hover\",\n                        gameState.currentPlayer === 0 && \"field__button--player-1-hover\")\n                    }\n                    disabled={props.isPlayed || gameState.isGameWon || gameState.currentPlayer}\n                    onMouseDown={ev => ev.preventDefault()}\n                    onClick={handleFieldClick}\n                >\n                </button>\n            </div>\n        </div>\n    );\n}","import React, { useContext } from 'react';\nimport { Field } from '../field/Field';\nimport { AppContext } from '../../App';\nimport classnames from 'classnames';\n\nimport './board.scss';\n\nexport function Board() { \n\n     const gameState = useContext(AppContext);\n\n    const fields = gameState.fields.map((field, index) => { \n        return <Field key={index} position={Math.pow(2, index)} index={ index } isPlayed={field.isPlayed} playedBy={field.playedBy} />\n    });\n\n    return (\n        <div className=\"board\">\n            <div className={classnames(\"board__fields\", gameState.isGameWon && \"board__fields--opacity\")}>\n                {fields}\n            </div>\n            <div className={classnames(\"board__message\", gameState.victoryMessage && \"board__message--opacity\")}>\n                {gameState.victoryMessage}\n            </div>\n        </div>\n    );\n}\n","export const initialFields = [\n    {\n        isPlayed: false,\n        playedBy: -1,\n    },\n    {\n        isPlayed: false,\n        playedBy: -1,\n    },\n    {\n        isPlayed: false,\n        playedBy: -1,\n    },\n    {\n        isPlayed: false,\n        playedBy: -1,\n    },\n    {\n        isPlayed: false,\n        playedBy: -1,\n    },\n    {\n        isPlayed: false,\n        playedBy: -1,\n    },\n    {\n        isPlayed: false,\n        playedBy: -1,\n    },\n    {\n        isPlayed: false,\n        playedBy: -1,\n    },\n    {\n        isPlayed: false,\n        playedBy: -1,\n    },\n    {\n        isPlayed: false,\n        playedBy: -1,\n    },\n    {\n        isPlayed: false,\n        playedBy: -1,\n    },\n    {\n        isPlayed: false,\n        playedBy: -1,\n    },\n    {\n        isPlayed: false,\n        playedBy: -1,\n    },\n    {\n        isPlayed: false,\n        playedBy: -1,\n    },\n    {\n        isPlayed: false,\n        playedBy: -1,\n    },\n    {\n        isPlayed: false,\n        playedBy: -1,\n    },\n];","export const winningMoves = [\n    0b0000000000001111, // first row\n    0b0000000011110000, // second row\n    0b0000111100000000, // third row\n    0b1111000000000000, // forth row\n    0b0001000100010001, // first column\n    0b0010001000100010, // second column\n    0b0100010001000100, // third column\n    0b1000100010001000, // forth column\n    0b1000010000100001, // left diagonal\n    0b0001001001001000, // right diagonal\n    0b0000000000110011, // top left square\n    0b0000000001100110, // top center square\n    0b0000000011001100, // top right square\n    0b0000001100110000, // middle left square\n    0b0000011001100000, // middle center square\n    0b0000110011000000, // middle right square\n    0b0011001100000000, // bottom left square\n    0b0110011000000000, // bottom center square\n    0b1100110000000000, // bottom right square\n];\n\nconst fullBoard = 0b1111111111111111; // board when all fields are populated\n\nexport const findPossibleWinningCombination = (playedMove) => { // find possible winning moves from played move\n    return winningMoves.filter(winningMove => { \n        return (winningMove & playedMove) === playedMove;\n    });\n}\n\nexport const checkWinAfterPlayedMove = (currentBoard, playedMove) => { // check for win right after a move has been played\n    let winningMove = 0;\n    const possibleWinningMoves = findPossibleWinningCombination(playedMove);\n    possibleWinningMoves.forEach(possibleWinningMove => {\n        if ((currentBoard & possibleWinningMove) === possibleWinningMove) { \n            winningMove = possibleWinningMove;\n        }\n    });\n    return winningMove;\n}\n\nexport const checkWinBeforePlayedMove = (currentBoard) => { // check for win for the curent board state\n    let willPlayerWin = 0;\n     for (let possibleWinningMove of winningMoves) {\n        if ((currentBoard & possibleWinningMove) === possibleWinningMove) { \n            willPlayerWin = possibleWinningMove;\n            break;\n        }\n    };\n    return willPlayerWin;\n}\n\nexport const checkTie = (board) => { // check if whole board is populated without anyone winning\n    return ((board & fullBoard) === fullBoard);\n}\n\nexport const evaluateBoard = (currentBoard, otherBoard) => { // heuristic for current player's board state\n    let totalValue = 0;\n    for (let possibleWinningMove of winningMoves) {\n        const currentValue = countBits(possibleWinningMove & currentBoard); // check how many moves did current player make in given row, column, diagonal or square\n        const otherValue = countBits(possibleWinningMove & otherBoard); // check how many moves did opponent make in given row, column, diagonal or square\n\n        if (otherValue === 0 && currentValue === 4) totalValue += 1000; // current player has all of it's moves played in this combination, opponent has none\n        else if (otherValue === 0 && currentValue === 3) totalValue += 100; // current player has 3 out of 4 of it's moves played in this combination, opponent has none\n        else if (otherValue === 0 && currentValue === 2) totalValue += 10; // current player has 2 out of 4 of it's moves played in this combination, opponent has none\n        else if (otherValue === 0 && currentValue === 1) totalValue += 1; // current player has 1 out of 4 of it's moves played in this combination, opponent has none\n    }\n    return totalValue;\n}\n\nconst countBits = (number) => { // count number of bit 1 in a number\n    return number && number.toString(2).match(/1/g).length;\n}","import { checkWinBeforePlayedMove, evaluateBoard } from './winningMoves';\n\nlet computerMoveField = 0; // field which will be chosen by computer to be played\n\nexport const computerMove = (boardOne, boardTwo) => {\n    computerMoveField = 0;\n    minimaxWithAlphaBetaPruning(boardOne, boardTwo, 0, 4, true, -Infinity, Infinity);\n    return computerMoveField;\n}\n\nexport const minimaxWithAlphaBetaPruning = (boardOne, boardTwo, depth, maxDepth, isComputerPlayer, alpha, beta) => {\n    if (checkWinBeforePlayedMove(isComputerPlayer ? boardTwo : boardOne) || maxDepth === depth) {\n        return evaluate(isComputerPlayer, depth, boardOne, boardTwo);\n    }\n\n    const board = boardOne | boardTwo;\n\n    let bestMove = null;\n    let bestResult = isComputerPlayer ? -Infinity : +Infinity;\n\n    const possibleMoves = getPossibleMoves(board).sort((a, b) => {return 0.5 - Math.random()});\n\n    if (!possibleMoves.length) return 0;\n\n    for (let currentPossibleMove of possibleMoves) {\n        const newBoardOne = isComputerPlayer ? boardOne : (currentPossibleMove | boardOne);\n        const newBoardTwo = isComputerPlayer ? (currentPossibleMove | boardTwo) : boardTwo;\n        const returnedResult = minimaxWithAlphaBetaPruning(newBoardOne, newBoardTwo,  depth + 1, maxDepth, !isComputerPlayer, alpha, beta);\n        \n        if (isComputerPlayer) {\n            if (returnedResult > bestResult) {\n                bestResult = returnedResult;\n                bestMove = currentPossibleMove;\n            }\n            if (bestResult > alpha) { \n                alpha = bestResult;\n                if (depth === 0) {\n                    computerMoveField = bestMove;\n                }\n            }\n            if (alpha >= beta) {\n                bestResult = alpha;\n                break;\n            }\n        }\n\n        else { \n            if (returnedResult < bestResult) {\n                bestResult = returnedResult;\n                bestMove = currentPossibleMove;\n            }\n            if (bestResult < beta) { \n                beta = bestResult;\n                if (depth === 0) { \n                    computerMoveField = bestMove;\n                }\n            } \n            if (beta <= alpha) {\n                bestResult = beta;\n                break;\n            }\n        }\n    };\n\n    return bestResult;\n}\n\nconst getPossibleMoves = (board) => { // returns all moves possible to be played\n    const possibleMoves = [];\n    for (let i = 0; i < 16; i++) { \n        if ((board & Math.pow(2, i)) === 0) { \n            possibleMoves.push(Math.pow(2, i));\n        }\n    }\n    return possibleMoves;\n}\n\nconst evaluate = (isComputerPlayer, depth, boardOne, boardTwo) => { // evaluate board depending on current player (maximizing or minimizing)\n    if (isComputerPlayer) {\n        return evaluateBoard(boardTwo, boardOne) - depth;\n    }\n    else { \n        return depth - evaluateBoard(boardOne, boardTwo);\n    }\n}","import React, { useState, useEffect, useRef } from 'react';\nimport { PlayerScore } from './components/player/PlayerScore';\nimport { Board } from './components/board/Board';\nimport { initialFields } from './helpers/js/initialFields';\nimport { checkWinAfterPlayedMove, checkTie } from './helpers/js/winningMoves'\nimport { computerMove } from './helpers/js/minimax';\n\nimport './app.scss';\n\nexport const AppContext = React.createContext({});\n\nfunction App() {\n\n  const [playerOneScore, setPlayerOneScore] = useState(0);\n  const [playerTwoScore, setPlayerTwoScore] = useState(0);\n  const [tieScore, setTieScore] = useState(0);\n\n  const isFirstRun = useRef(true);\n\n  const [fields, setFields] = useState(initialFields);\n  const [currentPlayer, setCurrentPlayer] = useState(Math.round(Math.random())); // 0 -> player 1 (human), 1 -> player 2 (computer)\n  const [currentBoardStatePlayerOne, setCurrentBoardStatePlayerOne] = useState(0);\n  const [currentBoardStatePlayerTwo, setCurrentBoardStatePlayerTwo] = useState(0);\n  const [lastPlayedField, setLastPlayedField] = useState(0);\n  const [isGameWon, setIsGameWon] = useState(false);\n  const [victoryMessage, setVictoryMessage] = useState(\"\");\n\n  const restartGame = () => {\n    setVictoryMessage(\"\");\n    setFields(initialFields);\n    setLastPlayedField(0);\n    setIsGameWon(false);\n\n    if (!currentBoardStatePlayerOne && !currentBoardStatePlayerTwo) { \n      setRandomPlayer();\n    }\n\n    else { \n      setCurrentBoardStatePlayerOne(0);\n      setCurrentBoardStatePlayerTwo(0);\n    }\n  }\n\n  const updatefields = (fieldIndex, fieldValue) => {\n    let items = [...fields];\n    items[fieldIndex] = fieldValue;\n    setFields(items);\n  }\n\n  const updatePlayersBoard = (playedField) => {\n    setLastPlayedField(playedField);\n\n    if (!currentPlayer) { // player 1 is on the move\n      setCurrentBoardStatePlayerOne(currentBoardStatePlayerOne | playedField);\n    }\n    else { // player 2 is on the move\n      setCurrentBoardStatePlayerTwo(currentBoardStatePlayerTwo | playedField);\n    }\n  }\n\n  const computerPlay = () => {\n    const computerMoveField = computerMove(currentBoardStatePlayerOne, currentBoardStatePlayerTwo);\n    for (let i = 0; i < 16; i++) { \n      if (Math.pow(2, i) === computerMoveField) { \n        updatefields(i, { isPlayed: true, playedBy: currentPlayer });\n        updatePlayersBoard(computerMoveField);\n      }\n    }\n  }\n\n  const setRandomPlayer = () => { \n    const randomNewPlayer = Math.round(Math.random());\n      if ((randomNewPlayer === currentPlayer) && currentPlayer) { \n        computerPlay();\n      }\n      else setCurrentPlayer(randomNewPlayer);\n  }\n\n  useEffect(() => {\n    if (isFirstRun.current) { // don't execute on initial load\n      isFirstRun.current = false;\n      return;\n    }\n    if (!currentBoardStatePlayerOne && !currentBoardStatePlayerTwo) {\n      setRandomPlayer();\n      return;\n    }\n    const checkForWin = checkWinAfterPlayedMove(currentPlayer ? currentBoardStatePlayerTwo : currentBoardStatePlayerOne, lastPlayedField);\n    if (checkForWin) {\n      setIsGameWon(true);\n      if (currentPlayer) {\n        setPlayerTwoScore(playerTwoScore + 1)\n        setVictoryMessage(\"Computer wins!\");\n      }\n      else {\n        setPlayerOneScore(playerOneScore + 1)\n        setVictoryMessage(\"User wins!\");\n      }\n    }\n    else if (checkTie(currentBoardStatePlayerTwo ^ currentBoardStatePlayerOne)) {\n      setIsGameWon(true);\n      setTieScore(tieScore + 1);\n      setVictoryMessage(\"It's a tie!\");\n    }\n    else {\n      setCurrentPlayer((currentPlayer + 1) % 2);\n    }\n  }, [currentBoardStatePlayerOne, currentBoardStatePlayerTwo]);\n\n  useEffect(() => {\n    if (currentPlayer) { // if player is computer execute it's code\n      computerPlay(); \n    }\n  }, [currentPlayer]);\n\n  return (\n    <div className=\"app\">\n      <div className=\"app__title\">\n        Tic-Tac-Toe 4x4\n      </div>\n      <AppContext.Provider value={{ currentPlayer, updatePlayersBoard, fields, updatefields, isGameWon, victoryMessage }}>\n        <Board />\n        <div className=\"app__score\">\n          <PlayerScore color=\"red\" player=\"0\" text=\"User\" score={playerOneScore} />\n          <PlayerScore text=\"Ties\" score={tieScore} />\n          <PlayerScore color=\"green\" player=\"1\" text=\"Computer\" score={playerTwoScore} />\n        </div>\n        <div className=\"app__restart\">\n          <button\n            onMouseDown={ev => ev.preventDefault()}\n            onClick={restartGame}\n          >\n            Restart Game\n          </button> \n        </div>\n      </AppContext.Provider>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}